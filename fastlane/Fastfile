default_platform(:ios)

before_all do
  ensure_git_branch
  ensure_git_status_clean
  git_pull
  
  # Store current directory
  fastlane_dir = Dir.pwd
  
  begin
    # Navigate to project root directory (one level up from fastlane directory)
    Dir.chdir("..")
    
    # Remove iOS and Android directories from project root
    sh "rm -rf ios android"
    
    # Run expo prebuild from project root
    sh "npx expo prebuild"
  ensure
    # Always return to fastlane directory, even if an error occurs
    Dir.chdir(fastlane_dir)
  end
end

# Create a new lane at the top level to run both iOS and Android builds
desc "Build and deploy both iOS and Android"
lane :deploy_all do
  # Use the full namespace to access platform-specific lanes
  ios :beta
  android :beta
end

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    setup_ci if ENV['CI']
    
    # Sync certificates
    match(type: "appstore", readonly: true)

     # Add debug statements
     puts "Current directory: #{Dir.pwd}"
     puts "File exists: #{File.exist?('./AuthKey_9KF34Z7C3A.p8')}"
    
    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "ios/coachmate.xcodeproj"
    )
    
    # Create build directory
    sh "mkdir -p ios/build"
    
    # Build your iOS app
    build_ios_app(
      workspace: "ios/coachmate.xcworkspace",
      scheme: "coachmate",
      export_method: "app-store",
      output_directory: "ios/build",
      output_name: "coachmate.ipa"
    )

    api_key = app_store_connect_api_key(
      key_id: "9KF34Z7C3A",
      issuer_id: "c182c483-9d61-427c-b16a-28deba60b60f",
      key_filepath: File.expand_path("./AuthKey_9KF34Z7C3A.p8"),
      duration: 1200
    )

    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: true
    )
  end
  
  # Make the lane accessible outside the platform scope
  lane :ios_beta do
    beta
  end
end

platform :android do
  desc "Push a new beta build to Play Store Internal Testing"
  lane :beta do
    setup_ci if ENV['CI']

    # Replace gradle build with EAS build
    result = sh("eas build --platform android --local")
    aab_path_match = result.match(/You can find the build artifacts in (.*\.aab)/)
    aab_path = aab_path_match ? aab_path_match[1] : "./myapp.aab"

    # Upload to Play Store Internal Testing
    upload_to_play_store(
      track: 'closed_test',
      skip_upload_apk: true,
      aab: aab_path,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      release_status: 'draft'
    )
  end
  
  # Make the lane accessible outside the platform scope
  lane :android_beta do
    beta
  end
end
